package bioinformatics_armory;

public class NEED {

    static int matchScore = 2;
    static int mismatchScore = -1;
    static int gapOpenPenalty = -10;
    static int gapExtendPenalty = -1;

    public static void main(String[] args) {
        String protein1 = "ATTCTTTCCTGTTTCCCTCTCTGCCCTCCCTCTCTCTCCCCACCATCTTCTCTCTTTATTTGAAACCAATGGCAATGGATTCTTGAGGTAAGAACCAGCGCTCCCTTCCTCTTGCCGCTTCATACAGAAAGAAACAGACGAGAAGCATCGAACCTATCAGCTTAGCGGCCAAACACAATTCCAGTCACAGAGAGCAACAGAGGAGGACATGATGGAGCCGAAGGAAAAGATGGGAAGGGGAAAGATAGAGATAAAGAGGATAGAAAATACCACGAACAGGCAAGTCACCTTTTGTAAGCGCCGCAATGGCCTTCTCAAAAAAGCCTACGAGCTCTCTGTCCTCTGCGACGCCGAGGTCGCCCTCGTCATCTTCTCCACCCGTGGCCGCCTCTACGAGTATGCCAATAACAGTGTAAAGGGCACTATCGAGCGTTACAAGAAAGCAAGCAGTGATAACTCCAGTTCTGGATCAATATCTGCAACAAATGCGCAGTATTATCTTCAAGAAGCCTCAAAACTTCGACAGCAAATCACAAGCTTACAGAATTCAAACAGACATCTGATGGGTGAGGCTCTAAGCACCATGAACCTAAGGGACTTGAAGCAGCTGGAATCAAGGCTAGAAAAAGGCATCAACAAAATAAGAACCAAAAAGAATGAGTTGCTATATGCTGAGATAGAGTACATGCAAAAAAGGGAGGTGGAACTTCAAAACGACAACATGTACCTCCGAAATAAGATAGCTGATAATGAAAGATCACAGCAGCAGCAACACATGAACATGATGCCATCAACAAGCACTGATTATGAAATGATGCCTCCCTTTGACTCCAGAAACTTCCTGCAAGTGAATCTAATGGATCCCAACAGTCACTACTCTCTCCAGCAGCAAACTGCCCTTCAATTAGGCTAGGTAGCATTACTGCTGCATTCCTGGAGCTGCATGAAGAAGGAGAAGCTTCCTCCATGGAAACTTCATTATGCCAACTATTATAGTTGGTGTGAATTGGGAATAGCAGGTTTTTCTCCACTACAGTTCATGTGATGACTCTATCCTATGCTAACTATTATACGTCATTATGCTATATATGTTGGACACATTGAGAACTTTGTTGTATATTAATCAAACTCTATGTTTAGTTTGCATGTAAAAAAAAAAAAAAAAAAAAAA";
        String protein2 = "ATGGAAGCCTCCGCCGGCTCGTCGCCACCGCACTCCCAAGAGAACCCGCCGGAGCACGGTGGCGACATGGGAGGGGCCCCCGCGGAGGAGATCGGAGGGGAGGCGGCGGATGATTTCATGTTCGCTGAAGACACGTTCCCCTCCCTCCCGGACTTCCCTTGCCTTTCGTCGCCGTCCAGCTCCACCTTCTCGTCCAACTCCTCGTCAAACTCCTCCAGCGCCTACACCAACACGGCAGGAAGAGCCGGCGGCGAGCCCTCCGAGCCTGCTTCGGCCGGAGAAGGGTTTGATGCGCTCGATGACATCGACCAGCTCCTCGACTTCGCGTCGCTTTCCATGCCGTGGGACTCCGAGCCGTTCCCGGGGGTTAGCATGATGCTAGAGAACGCCATGTCGGCGCCGCCGCAGCCGGTGGGCGACGGCATGAGTGAAGAGAAAGCCGTGCCGGAAGGGACCACAGGGGGAGAGGAGGCCTGCATGGATGCGTCGGAGGGGGAGGAGCTGCCGCGGTTCTTCATGGAGTGGCTCACGAGCAACCGCGAAAACATCTCGGCCGAGGATCTCCGCGGGATCCGCCTCCGCCGCTCCACCATCGAGGCCGCCGCCGCCCGGCTCGGCGGCGGGCGCCAGGGCACCATGCAGCTGCTCAAGCTCATCCTCACCTGGGTGCAGAACCACCACCTCCAGAGGAAGCGCCCGCGCGACGTGATGGAGGAGGAGGCGGGCCTGCACGTCCAGCTCCCCAGCCCGGTCGCCAACCCACCAGGATACGAGTTCCCCGCCGGCGGACAGGACATGGCCGCGGGCGGCGGCACATCTTGGATGCCCCACCAGCAGGCATTCACGCCGCCTGCTGCGTACGGCGGCGACGCGGTGTACCCGAGCGCGGCAGGCCAACAGTACTCTTTCCACCAGGGCCCCAGCACGAGCAGCGTGGTCGTGAACAGCCAACCGTTCTCCCCGCCGCCTGTGGGCGACATGCACGGCGCGAACATGGCCTGGCCGCAGCAGTACGTGCCGTTCCCACCGCCTGGGGCTTCCACGGGCTCTTACCCTATGCCGCAGCCGTTCTCCCCCGGATTCGGCGGGCAGTACGCCGGCGCCGGCGCTGGCCACCTCTCAGTGGCCCCCCAGCGCATGGCAGGCGTGGAGGCCTCGGCGACCAAGGAGGCCCGCAAGAAGCGCATGGCGAGACAGCGGCGCCTGTCCTGCCTGCAGCAGCAGCGCAGCCAGCAGCTGAGCCTGGGCCAGATCCAGGCCTCCGTCCACCTGCAGGAGCCGTCCCCTCGGTCCACGCACTCCGGCCCGGTCACGCCGTCAGCAGGCGGCTGGGGATTCTGGTCGCCGAGCAGCCAGCAGCAGGTCCAGAACCCGCTCTCCAAGTCCAATTCATCAAGGGCGCCGCCTCCCTCGCTGGAAGCGGCGGCGGTGGCGCCACAGACAAAGCCCGCGCCTGCTGGTGCTCGGCAGGACGACATTCACCACCGCCTCGCAGCGGCTTCAGATAAGCGGCAGGGCGCCAAGGCGGACAAGAACCTGCGGTTCCTGCTGCAGAAGGTGCTGAAGCAGAGCGACGTCGGGAGCCTCGGCCGCATCGTGCTCCCCAAAGAAGCGGAGGTTCACCTGCCGGAGCTGAAGACGAGGGATGGCATCTCCATCCCCATGGAGGACATCGGAACGTCGCGCGTGTGGAACATGCGGTACAGGTTTTGGCCCAACAACAAGAGCAGAATGTATCTGCTGGAGAACACAGGGGAATTTGTTCGTTCCAACGAGCTTCAGGAGGGGGATTTCATAGTGATCTACTCCGATGTCAAGTCGGGCAAATATCTGATACGGGGCGTGAAGGTAAGGCCCCCGCCGGCGCAAGAGCAAGGCAGTGGTTCCAGCGGGGGAGGCAAGCACAGGCCCCTCTGTCCAGCAGGTCCAGGGAGAGCCGCAGCCGCCGGTGCTCCTGAAGACGCCGTCGTCGACGGGGTCAGCGGCGCCTGCAAGGGGAGGTCTCCGGAAGGCGTGCGGCGGGTTCGGCAGCAGGGAGCCGGCGCCATGAGCCAGATGGCGGTGAGCATC";
        System.out.println("Alignment: \n" + needlemanWunsch(protein1, protein2));
    }

    public static String needlemanWunsch(String protein1, String protein2) {
        int m = protein1.length();
        int n = protein2.length();
        int[][] matchMatrix = new int[m+1][n+1];
        int[][] deleteMatrix = new int[m+1][n+1];
        int[][] insertMatrix = new int[m+1][n+1];

        // Initialize the score matrices
        for (int i = 0; i <= m; i++) {
            matchMatrix[i][0] = Integer.MIN_VALUE / 2;  // effectively negative infinity
            deleteMatrix[i][0] = gapOpenPenalty + gapExtendPenalty * i;
        }
        for (int j = 0; j <= n; j++) {
            matchMatrix[0][j] = Integer.MIN_VALUE / 2;  // effectively negative infinity
            insertMatrix[0][j] = gapOpenPenalty + gapExtendPenalty * j;
        }
        matchMatrix[0][0] = 0;

        // Fill the score matrices
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                matchMatrix[i][j] = Math.max(matchMatrix[i-1][j-1], Math.max(deleteMatrix[i-1][j-1], insertMatrix[i-1][j-1])) + score(protein1.charAt(i-1), protein2.charAt(j-1));
                deleteMatrix[i][j] = Math.max(matchMatrix[i-1][j] + gapOpenPenalty, deleteMatrix[i-1][j] + gapExtendPenalty);
                insertMatrix[i][j] = Math.max(matchMatrix[i][j-1] + gapOpenPenalty, insertMatrix[i][j-1] + gapExtendPenalty);
            }
        }

        // Traceback
        StringBuilder alignment1 = new StringBuilder();
        StringBuilder alignment2 = new StringBuilder();
        int i = m;
        int j = n;
        while (i > 0 || j > 0) {
            if (i > 0 && j > 0 && matchMatrix[i][j] == Math.max(matchMatrix[i-1][j-1], Math.max(deleteMatrix[i-1][j-1], insertMatrix[i-1][j-1])) + score(protein1.charAt(i-1), protein2.charAt(j-1))) {
                // Diagonal move (match or mismatch)
                alignment1.append(protein1.charAt(i-1));
                alignment2.append(protein2.charAt(j-1));
                i--;
                j--;
            } else if (i > 0 && deleteMatrix[i][j] == Math.max(matchMatrix[i-1][j] + gapOpenPenalty, deleteMatrix[i-1][j] + gapExtendPenalty)) {
                // Up move (deletion)
                alignment1.append(protein1.charAt(i-1));
                alignment2.append("-");
                i--;
            } else {
                // Left move (insertion)
                alignment1.append("-");
                alignment2.append(protein2.charAt(j-1));
                j--;
            }
        }

        // The optimal alignment is the reverse of the constructed strings
        System.out.println(matchMatrix[m][n]);
        return alignment1.reverse().toString() + "\n" + alignment2.reverse().toString();
    }

    public static int score(char a, char b) {
        return (a == b) ? matchScore : mismatchScore;
    }


}
